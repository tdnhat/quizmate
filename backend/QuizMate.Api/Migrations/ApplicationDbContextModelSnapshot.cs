// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizMate.Api.Data;

#nullable disable

namespace QuizMate.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "74eccc03-ef02-4605-ad85-d5c5606d05eb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "32fd3c82-b60a-431d-9be8-34d467693e59",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuizMate.Api.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuizMate.Api.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuizMate.Api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColorPreset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuizCount")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "programming",
                            ColorPreset = "blue",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4129),
                            Description = "Quizzes about programming languages, concepts, and software development.",
                            IsFeatured = false,
                            Name = "Programming",
                            QuizCount = 0,
                            Slug = "programming"
                        },
                        new
                        {
                            Id = "computer_science",
                            ColorPreset = "indigo",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4136),
                            Description = "Theoretical computer science, algorithms, data structures, and computing concepts.",
                            IsFeatured = false,
                            Name = "Computer Science",
                            QuizCount = 0,
                            Slug = "computer-science"
                        },
                        new
                        {
                            Id = "mathematics",
                            ColorPreset = "teal",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4145),
                            Description = "Quizzes covering various mathematical concepts, from algebra to calculus.",
                            IsFeatured = false,
                            Name = "Mathematics",
                            QuizCount = 0,
                            Slug = "mathematics"
                        },
                        new
                        {
                            Id = "science",
                            ColorPreset = "green",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4153),
                            Description = "General science topics including physics, chemistry, and biology.",
                            IsFeatured = false,
                            Name = "Science",
                            QuizCount = 0,
                            Slug = "science"
                        },
                        new
                        {
                            Id = "history",
                            ColorPreset = "orange",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4162),
                            Description = "Historical events, figures, and time periods from around the world.",
                            IsFeatured = false,
                            Name = "History",
                            QuizCount = 0,
                            Slug = "history"
                        },
                        new
                        {
                            Id = "web_dev",
                            ColorPreset = "sky",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4185),
                            Description = "Frontend, backend, and full-stack web development topics.",
                            IsFeatured = false,
                            Name = "Web Development",
                            QuizCount = 0,
                            Slug = "web-dev"
                        },
                        new
                        {
                            Id = "data_science",
                            ColorPreset = "purple",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4195),
                            Description = "Data analysis, machine learning, and statistical methods.",
                            IsFeatured = false,
                            Name = "Data Science",
                            QuizCount = 0,
                            Slug = "data-science"
                        },
                        new
                        {
                            Id = "ai",
                            ColorPreset = "violet",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4264),
                            Description = "AI concepts, machine learning, neural networks, and their applications.",
                            IsFeatured = false,
                            Name = "Artificial Intelligence",
                            QuizCount = 0,
                            Slug = "ai"
                        },
                        new
                        {
                            Id = "mobile_dev",
                            ColorPreset = "emerald",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4273),
                            Description = "iOS, Android, and cross-platform mobile development.",
                            IsFeatured = false,
                            Name = "Mobile Development",
                            QuizCount = 0,
                            Slug = "mobile-dev"
                        },
                        new
                        {
                            Id = "cybersecurity",
                            ColorPreset = "red",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4283),
                            Description = "Computer security, network security, and ethical hacking.",
                            IsFeatured = false,
                            Name = "Cybersecurity",
                            QuizCount = 0,
                            Slug = "cybersecurity"
                        },
                        new
                        {
                            Id = "business",
                            ColorPreset = "slate",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4291),
                            Description = "Business concepts, management theories, and organizational behavior.",
                            IsFeatured = false,
                            Name = "Business & Management",
                            QuizCount = 0,
                            Slug = "business"
                        },
                        new
                        {
                            Id = "finance",
                            ColorPreset = "green",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4300),
                            Description = "Personal finance, investing, accounting, and financial markets.",
                            IsFeatured = false,
                            Name = "Finance",
                            QuizCount = 0,
                            Slug = "finance"
                        },
                        new
                        {
                            Id = "marketing",
                            ColorPreset = "pink",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4308),
                            Description = "Marketing strategies, consumer behavior, and advertising techniques.",
                            IsFeatured = false,
                            Name = "Marketing",
                            QuizCount = 0,
                            Slug = "marketing"
                        },
                        new
                        {
                            Id = "entrepreneurship",
                            ColorPreset = "yellow",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4320),
                            Description = "Startup concepts, business models, and entrepreneurial mindset.",
                            IsFeatured = false,
                            Name = "Entrepreneurship",
                            QuizCount = 0,
                            Slug = "entrepreneurship"
                        },
                        new
                        {
                            Id = "movies_tv",
                            ColorPreset = "red",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4329),
                            Description = "Film history, TV shows, actors, directors, and cinema trivia.",
                            IsFeatured = false,
                            Name = "Movies & TV",
                            QuizCount = 0,
                            Slug = "movies"
                        },
                        new
                        {
                            Id = "music",
                            ColorPreset = "purple",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4336),
                            Description = "Musical genres, artists, bands, instruments, and music theory.",
                            IsFeatured = false,
                            Name = "Music",
                            QuizCount = 0,
                            Slug = "music"
                        },
                        new
                        {
                            Id = "gaming",
                            ColorPreset = "lime",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4345),
                            Description = "Video games, gaming platforms, game development, and gaming culture.",
                            IsFeatured = false,
                            Name = "Gaming",
                            QuizCount = 0,
                            Slug = "gaming"
                        },
                        new
                        {
                            Id = "sports",
                            ColorPreset = "blue",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4355),
                            Description = "Various sports, athletes, championships, and sporting events.",
                            IsFeatured = false,
                            Name = "Sports",
                            QuizCount = 0,
                            Slug = "sports"
                        },
                        new
                        {
                            Id = "general_knowledge",
                            ColorPreset = "teal",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4363),
                            Description = "Diverse topics testing overall knowledge and trivia.",
                            IsFeatured = false,
                            Name = "General Knowledge",
                            QuizCount = 0,
                            Slug = "general-knowledge"
                        },
                        new
                        {
                            Id = "languages",
                            ColorPreset = "indigo",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4372),
                            Description = "Vocabulary, grammar, and linguistic concepts from various languages.",
                            IsFeatured = false,
                            Name = "Languages",
                            QuizCount = 0,
                            Slug = "language"
                        },
                        new
                        {
                            Id = "geography",
                            ColorPreset = "emerald",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4380),
                            Description = "Countries, capitals, natural features, and global geography.",
                            IsFeatured = false,
                            Name = "Geography",
                            QuizCount = 0,
                            Slug = "geography"
                        },
                        new
                        {
                            Id = "food_cooking",
                            ColorPreset = "orange",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4390),
                            Description = "Culinary arts, cuisine, ingredients, and cooking techniques.",
                            IsFeatured = false,
                            Name = "Food & Cooking",
                            QuizCount = 0,
                            Slug = "food-cooking"
                        },
                        new
                        {
                            Id = "art_design",
                            ColorPreset = "violet",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4395),
                            Description = "Fine arts, design principles, art history, and creative techniques.",
                            IsFeatured = false,
                            Name = "Art & Design",
                            QuizCount = 0,
                            Slug = "art-design"
                        },
                        new
                        {
                            Id = "literature",
                            ColorPreset = "yellow",
                            CreatedAt = new DateTime(2025, 4, 20, 16, 34, 22, 349, DateTimeKind.Utc).AddTicks(4403),
                            Description = "Books, authors, literary genres, and famous works.",
                            IsFeatured = false,
                            Name = "Literature",
                            QuizCount = 0,
                            Slug = "literature"
                        });
                });

            modelBuilder.Entity("QuizMate.Api.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Completions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("PassingScore")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<int?>("TimeMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentQuestionIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("JoinCode")
                        .IsUnique()
                        .HasFilter("\"Status\" IN ('Waiting', 'Active')");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizSessions");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSessionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizSessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("TimeTaken")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizSessionAnswers");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSessionParticipant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuizSessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId")
                        .IsUnique();

                    b.HasIndex("QuizSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSessionParticipants");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Result", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CorrectAnswersCount")
                        .HasColumnType("integer");

                    b.Property<int>("IncorrectAnswersCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<double>("PassRate")
                        .HasColumnType("double precision");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTaken")
                        .HasColumnType("integer");

                    b.Property<int>("UnansweredCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("QuizId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("QuizMate.Api.Models.ResultAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EarnedPoints")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResultId");

                    b.ToTable("ResultAnswers");
                });

            modelBuilder.Entity("QuizMate.Api.Models.SavedQuiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("QuizId");

                    b.ToTable("SavedQuizzes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizMate.Api.Models.Answer", b =>
                {
                    b.HasOne("QuizMate.Api.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Question", b =>
                {
                    b.HasOne("QuizMate.Api.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Quiz", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", "AppUser")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Category", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSession", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSessionAnswer", b =>
                {
                    b.HasOne("QuizMate.Api.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.QuizSessionParticipant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Participant");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSessionParticipant", b =>
                {
                    b.HasOne("QuizMate.Api.Models.QuizSession", "QuizSession")
                        .WithMany("Participants")
                        .HasForeignKey("QuizSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuizSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Result", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", "AppUser")
                        .WithMany("QuizResults")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Quiz", "Quiz")
                        .WithMany("Results")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizMate.Api.Models.ResultAnswer", b =>
                {
                    b.HasOne("QuizMate.Api.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Result", "Result")
                        .WithMany("ResultAnswers")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("QuizMate.Api.Models.SavedQuiz", b =>
                {
                    b.HasOne("QuizMate.Api.Models.AppUser", "AppUser")
                        .WithMany("SavedQuizzes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMate.Api.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizMate.Api.Models.AppUser", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("QuizResults");

                    b.Navigation("SavedQuizzes");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Category", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("QuizMate.Api.Models.QuizSession", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("QuizMate.Api.Models.Result", b =>
                {
                    b.Navigation("ResultAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
